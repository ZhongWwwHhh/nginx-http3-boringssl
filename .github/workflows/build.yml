name: Build NGINX with HTTP/3 (QUIC) support

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 2 * * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Apt Update
        run: sudo apt update

      - name: Install Dependencies
        run: sudo apt install -y build-essential ca-certificates zlib1g-dev libpcre3 libpcre3-dev tar unzip libssl-dev wget curl git cmake ninja-build libunwind-dev pkg-config

      - name: Get BoringSSL Latest Commit
        id: boringssl_commit
        run: |
          echo "boringssl-commit=$(git ls-remote https://github.com/google/boringssl.git HEAD | awk '{ print $1 }')" >> $GITHUB_ENV

      - name: Cache BoringSSL
        id: cache_boringssl
        uses: actions/cache@v4
        with:
          path: boringssl
          key: ${{ runner.os }}-boringssl-${{ env.boringssl-commit }}

      - name: Get Brotil Latest Commit
        id: ngx_brotli_commit
        run: |
          echo "ngx-brotli-commit=$(git ls-remote https://github.com/google/ngx_brotli.git HEAD | awk '{ print $1 }')" >> $GITHUB_ENV

      - name: Cache Brotil
        id: cache_ngx_brotli
        uses: actions/cache@v4
        with:
          path: ngx_brotli
          key: ${{ runner.os }}-ngx_brotli-${{ env.ngx-brotli-commit }}

      - name: Get Nginx Latest Release Tag
        id: latest_nginx_tag
        run: |
          echo "latest-nginx-tag=$(curl -s https://raw.githubusercontent.com/ZhongWwwHhh/fork-nginx-ech/ech-boringssl/src/core/nginx.h | grep '#define NGINX_VERSION' | awk '{print $3}' | tr -d '"')" >> $GITHUB_ENV

      - name: Cache Nginx
        id: cache_nginx
        uses: actions/cache@v4
        with:
          path: nginx
          key: ${{ runner.os }}-nginx-${{ env.latest-nginx-tag }}

      - if: steps.cache_nginx.outputs.cache-hit != 'true'
        name: Prepare NGINX source
        run: |
          git clone --depth=1 --branch ech-boringssl https://github.com/ZhongWwwHhh/fork-nginx-ech.git ./nginx

      - if: steps.cache_boringssl.outputs.cache-hit != 'true'
        name: Prepare BoringSSL
        run: |
          git clone --depth=1 https://github.com/google/boringssl.git
          cd boringssl
          cmake -GNinja -B build -DCMAKE_BUILD_TYPE=Release
          ninja -C build -j $(nproc)
          cd ..
          ls boringssl/build

      - if: steps.cache_ngx_brotli.outputs.cache-hit != 'true'
        name: Prepare Brotil
        run: |
          git clone --recurse-submodules -j8 https://github.com/google/ngx_brotli
          cd ngx_brotli/deps/brotli
          mkdir out && cd out
          cmake -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_C_FLAGS="-Ofast -march=x86-64-v2 -mtune=generic -flto -funroll-loops -ffunction-sections -fdata-sections -Wl,--gc-sections" \
            -DCMAKE_CXX_FLAGS="-Ofast -march=x86-64-v2 -mtune=generic -flto -funroll-loops -ffunction-sections -fdata-sections -Wl,--gc-sections" \
            -DCMAKE_INSTALL_PREFIX=./installed ..
          cmake --build . --config Release --target brotlienc
          cd ../../../..

      - if: steps.cache_nginx.outputs.cache-hit != 'true' || steps.cache_boringssl.outputs.cache-hit != 'true' || steps.cache_ngx_brotli.outputs.cache-hit != 'true'
        name: Make Nginx
        run: |
          cd nginx
          ./auto/configure \
            --user=nginx \
            --group=nginx \
            --with-compat \
            --with-pcre-jit \
            --with-threads \
            --with-file-aio \
            --add-module=../ngx_brotli \
            --with-http_v2_module \
            --with-http_ssl_module \
            --with-http_gunzip_module \
            --with-http_sub_module \
            --with-http_addition_module \
            --with-http_realip_module \
            --with-http_mp4_module \
            --with-http_auth_request_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_gzip_static_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_slice_module \
            --with-ld-opt=-Wl,-E \
            --with-http_v3_module \
            --with-cc=c++ \
            --with-cc-opt="-march=x86-64-v2 -mtune=generic -I../boringssl/include -x c -O2 -fstack-protector-strong -Wformat -fPIC -g -fno-omit-frame-pointer -flto=auto -ffat-lto-objects -fstack-clash-protection -Werror=format-security -fcf-protection -Wdate-time -D_FORTIFY_SOURCE=3" \
            --with-ld-opt="-L../boringssl/build -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -Wl,-z,now" \
            --prefix=/usr/share/nginx \
            --conf-path=/etc/nginx/nginx.conf \
            --http-log-path=/var/log/nginx/access.log \
            --error-log-path=/var/log/nginx/error.log \
            --lock-path=/var/lock/nginx.lock \
            --pid-path=/run/nginx.pid \
            --modules-path=/usr/lib/nginx/modules \
            --http-client-body-temp-path=/var/lib/nginx/body \
            --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
            --http-proxy-temp-path=/var/lib/nginx/proxy \
            --http-scgi-temp-path=/var/lib/nginx/scgi \
            --http-uwsgi-temp-path=/var/lib/nginx/uwsgi
          make -j $(nproc)

      - name: Generate Release Name
        run: |
          release_name="nginx-${{ env.latest-nginx-tag }}-$(date +'%Y.%m.%d')"
          release_file_name="${release_name}-linux-amd64"
          echo "release-name=${release_name}" >> $GITHUB_ENV
          echo "release-file-name=${release_file_name}" >> $GITHUB_ENV
          cp nginx/objs/nginx $release_file_name

      - if: steps.cache_nginx.outputs.cache-hit != 'true' || steps.cache_boringssl.outputs.cache-hit != 'true' || steps.cache_ngx_brotli.outputs.cache-hit != 'true'
        name: Release Post
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.release-file-name }}
          name: ${{ env.release-name }}
          tag_name: ${{ env.release-name }}
          body: "${{ env.release-name }} with HTTP/3 (QUIC) support and BoringSSL."
          token: ${{ secrets.GH_TOKEN }}

      - name: Cleanup Old Releases and Tags
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          release_tags=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].tag_name')
          all_tags=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/${{ github.repository }}/git/refs/tags | jq -r '.[].ref' | sed 's|refs/tags/||')
          releases=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[] | @base64')
          
          # remove old releases and tags
          count=0
          for release in $releases; do
            release_id=$(echo $release | base64 -d | jq -r '.id')
            tag_name=$(echo $release | base64 -d | jq -r '.tag_name')
            count=$((count + 1))
            if [ $count -gt 10 ]; then
              echo "Deleting release ID: $release_id and tag: $tag_name"
              curl -s -X DELETE -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/${{ github.repository }}/releases/$release_id
              curl -s -X DELETE -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$tag_name
            fi
          done

          # find and remove orphan tags
          orphan_tags=$(comm -23 <(echo "$all_tags" | sort) <(echo "$release_tags" | sort))
          for tag in $orphan_tags; do
            echo "Deleting orphan tag: $tag"
            curl -s -X DELETE -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$tag
          done